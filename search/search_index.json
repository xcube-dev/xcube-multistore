{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"xcube Multi-Source Data Store","text":"<p><code>xcube-multistore</code> is a Python package designed to create a Multi-Source Data Store  that enables the seamless integration of data from multiple sources into a unified  data model. This approach simplifies the data fusion process while ensuring  transparency and reproducibility through well-defined configurations.</p> <p>The package utilizes xcube\u2019s data access,  implemented via data store plugins, along with additional functionalities from  xcube, to manipulate and harmonize datasets according to user-defined specifications.</p> <p>The workflow includes the following steps:</p> <ol> <li>Data access through xcube data stores</li> <li>Data harmonization</li> <li>Data fusion (if required)</li> </ol> <p>This process results in either a single, unified data cube with all datasets aligned to a consistent grid or a catalog of separate datasets.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Multi-Source Data Store is configure via a yml file. One example can be seen heer. More documentation on the creating a config file is given in (add section). The  Multi-Source Data Store can then be started by a single line of code, presented below.</p> <p>The Multi-Source Data Store is configured via a YAML file. An example configuration  can be found here. More detailed documentation on creating a config file is available in the (add section).</p> <p>Once the configuration is set up, the Multi-Source Data Store can be started with a  single line of code, as shown below.</p> <pre><code>from xcube_multistore import MultiSourceDataStore\n\nmsds = MultiSourceDataStore(\"config.yml\")\n</code></pre>"},{"location":"#features","title":"Features","text":"<p>IMPORTANT: The <code>xcube-multistore</code> package is currently in the early stages of development. The following features are available so far:</p> <ul> <li>subset of dataset (defined by grid mapping)</li> <li>resample and reproject dataset (defined by grid mapping)</li> <li>grid mapping may be defined by the user or by a dataset </li> <li>allow for time series at a single spatial point; interpolate the neighbouring points</li> <li>allow data fusion, where data variables in one <code>xr.Dataset</code> refers to different data sources</li> <li>support spatial cutout of an area around a defined spatial point.</li> <li>support preload API for xcube-clms and    xcube-zendoo</li> <li>allow to write to netcdf and zarr</li> </ul> <p>The following features will be implemented in the future:</p> <ul> <li>some auxiliary functionalities which shall help to setup a config yml file. </li> <li>interpolate along the time axis </li> </ul>"},{"location":"#license","title":"License","text":"<p>The package is open source and released under the  MIT license. </p>"},{"location":"about/","title":"About the <code>xcube-multistore</code> project","text":""},{"location":"about/#changelog","title":"Changelog","text":"<p>You can find the complete <code>xcube-multistore</code> changelog  here. </p>"},{"location":"about/#reporting","title":"Reporting","text":"<p>If you have suggestions, ideas, feature requests, or if you have identified a malfunction or error, then please  post an issue. </p>"},{"location":"about/#contributions","title":"Contributions","text":"<p>The <code>xcube-multistore</code> project welcomes contributions of any form as long as you respect our  code of conduct and follow our  contribution guide.</p> <p>If you'd like to submit code or documentation changes, we ask you to provide a  pull request (PR)  here.  For code and configuration changes, your PR must be linked to a  corresponding issue. </p>"},{"location":"about/#development","title":"Development","text":"<p>To install the <code>xcube-multistore</code> development environment into an existing Python  environment, do</p> <pre><code>pip install .[dev,doc]\n</code></pre> <p>or create a new environment using <code>conda</code> or <code>mamba</code></p> <pre><code>mamba env create \n</code></pre>"},{"location":"about/#testing-and-coverage","title":"Testing and Coverage","text":"<p><code>xcube-multistore</code> uses pytest for unit-level testing  and code coverage analysis.</p> <pre><code>pytest tests/ --cov=xarray_eopf --cov-report html\n</code></pre>"},{"location":"about/#code-style","title":"Code Style","text":"<p>The <code>xcube-multistore</code> source code is formatted and quality-controlled  using ruff:</p> <pre><code>ruff format\nruff check\n</code></pre>"},{"location":"about/#documentation","title":"Documentation","text":"<p>The <code>xcube-multistore</code> documentation is built using the  mkdocs tool.</p> <p>With repository root as current working directory:</p> <pre><code>pip install .[doc]\n\nmkdocs build\nmkdocs serve\nmkdocs gh-deploy\n</code></pre>"},{"location":"about/#license","title":"License","text":"<p><code>xcube-multistore</code> is open source made available under the terms and conditions of the  MIT license.</p>"},{"location":"start/","title":"Getting Started","text":"<p>By installing the <code>xcube-multistore</code> package into an existing Python environment using</p> <pre><code>pip install xcube-multistore\n</code></pre> <p>or</p> <pre><code>conda install -c conda-forge xcube-multistore\n</code></pre> <p>you are ready to go and use the Mutli-Source Data Store as follows:</p> <pre><code>from xcube_multistore import MultiSourceDataStore\n\nmsds = MultiSourceDataStore(\"config.yml\")\n</code></pre>"}]}